package database

import (
	"database/sql"
	"erp-api/util/configuration"
	"fmt"
	"os"

	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
)

var DB *sql.DB

func InitDB(){
	logger := configuration.Logger()
	
	err := godotenv.Load()
  if err != nil {
    logger.Fatal("Error loading .env file")
  }

	dbPass := os.Getenv("DB_PASS")
	dbUser := os.Getenv("DB_USER")
	dbAddress := os.Getenv("DB_ADDRESS")
	dbPort := os.Getenv("DB_PORT")
	dbName := os.Getenv("DB_NAME")

	if dbUser == "" || dbPass == "" || dbAddress == "" || dbPort == "" || dbName == "" {
		logger.Fatal("Database environment variables are not set")
	}

	databaseUrl := fmt.Sprintf("postgres://%v:%v@%v:%v/%v?sslmode=disable", dbUser, dbPass, dbAddress, dbPort, dbName)

	DB, _ = sql.Open("postgres", databaseUrl)
	if err != nil {
		logger.Sugar().Fatalf("Failed to connect to the database: %v", err)
	}

	DB.SetMaxOpenConns(10)
	DB.SetMaxIdleConns(5)

	logger.Sugar().Infof("Connected to database at URL: %v", databaseUrl)

	createTables()
}

func createTables(){
	createTableQuery := `
		CREATE TABLE IF NOT EXISTS public.items (
			item_id VARCHAR NOT NULL,
			price BIGINT NOT NULL,
			description VARCHAR NULL,
			CONSTRAINT items_pkey PRIMARY KEY (item_id)
		);
	`

	_, err := DB.Exec(createTableQuery)

	if err != nil {
		panic(err)
	}

	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.inventory_gudang (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			item_id VARCHAR NOT NULL,
			quantity BIGINT NULL,
			description VARCHAR NULL,
			CONSTRAINT inventory_gudang_pkey PRIMARY KEY (id),
			CONSTRAINT inventory_gudang_item_id_fkey 
				FOREIGN KEY (item_id) REFERENCES items (item_id)
		);
	`
	_, err = DB.Exec(createTableQuery)

	if err != nil {
		panic(err)
	}

	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.inventory_tiktok (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			item_id VARCHAR NOT NULL,
			quantity BIGINT NULL,
			description VARCHAR NULL,
			CONSTRAINT inventory_tiktok_pkey PRIMARY KEY (id),
			CONSTRAINT inventory_tiktok_item_id_fkey 
				FOREIGN KEY (item_id) REFERENCES items (item_id)
		);
	`

	_, err = DB.Exec(createTableQuery)
	
	if err != nil {
		panic(err)
	}

	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.inventory_toko (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			item_id VARCHAR NOT NULL,
			quantity BIGINT NULL,
			description VARCHAR NULL,
			CONSTRAINT inventory_toko_pkey PRIMARY KEY (id),
			CONSTRAINT inventory_toko_item_id_fkey 
				FOREIGN KEY (item_id) REFERENCES items (item_id)
		);
	`

	_, err = DB.Exec(createTableQuery)
	if err != nil {
		panic(err)
	}

	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.payments (
			payment_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			payment_method VARCHAR NOT NULL,
			CONSTRAINT payments_pkey PRIMARY KEY (payment_id)
		);
	`

	_, err = DB.Exec(createTableQuery)
	if err != nil {
		panic(err)
	}

	insertPaymentsQuery := `
		INSERT INTO public.payments (payment_id, payment_method) VALUES
			(1, 'Tunai'),
			(2, 'Debit'),
			(3, 'Transfer'),
			(4, 'Cek / GIRO'),
			(5, 'QR'),
			(6, 'Hutang')
		ON CONFLICT (payment_id) DO NOTHING;
	`

	_, err = DB.Exec(insertPaymentsQuery)
	if err != nil {
		panic(err)
	}


	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.transactions (
			transaction_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			discount_type VARCHAR NULL,
			discount_percent SMALLINT NULL,
			total_discount BIGINT NULL,
			payment_id BIGINT NULL,
			customer_name VARCHAR NULL,
			timestamp TIMESTAMP WITHOUT TIME ZONE NULL,
			location VARCHAR NULL,
			payment_status VARCHAR NULL,
			CONSTRAINT transactions_pkey PRIMARY KEY (transaction_id),
			CONSTRAINT transactions_payment_id_fkey FOREIGN KEY (payment_id) 
				REFERENCES public.payments (payment_id) ON DELETE SET NULL
		);
	`

	_, err = DB.Exec(createTableQuery)
	if err != nil {
		panic(err)
	}

	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.sales (
			sale_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			description VARCHAR NULL,
			quantity BIGINT NULL,
			price BIGINT NULL,
			total BIGINT NULL,
			discount_per_item REAL NULL,
			quantity_retur BIGINT NULL,
			transaction_id BIGINT NULL,
			item_id VARCHAR NULL,
			CONSTRAINT sales_pkey PRIMARY KEY (sale_id),
			CONSTRAINT sales_item_id_fkey FOREIGN KEY (item_id) 
				REFERENCES public.items (item_id) ON DELETE SET NULL,
			CONSTRAINT sales_transaction_id_fkey FOREIGN KEY (transaction_id) 
				REFERENCES public.transactions (transaction_id) ON DELETE CASCADE
		);
	`

	_, err = DB.Exec(createTableQuery)
	if err != nil {
		panic(err)
	}

	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.users (
			user_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			username VARCHAR NOT NULL UNIQUE,
			password VARCHAR NULL,
			role VARCHAR NULL,
			CONSTRAINT users_pkey PRIMARY KEY (user_id)
		);
	`

	_, err = DB.Exec(createTableQuery)
	if err != nil {
		panic(err)
	}

	createTableQuery = `
		CREATE TABLE IF NOT EXISTS public.inventory_rusak (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
			item_id VARCHAR NOT NULL,
			quantity BIGINT NULL,
			description VARCHAR NULL,
			CONSTRAINT inventory_rusak_pkey PRIMARY KEY (id),
			CONSTRAINT inventory_rusak_item_id_fkey 
				FOREIGN KEY (item_id) REFERENCES items (item_id)
		);
	`

	_, err = DB.Exec(createTableQuery)
	if err != nil{
		panic(err)
	}
}